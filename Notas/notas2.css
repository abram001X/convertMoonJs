/* row(eje x) 
Propiedades de grid
.grid_item:nth-child(2): funciona para elegir elementos de la clase
:first -child: elige el primer elemento de la clase 
-----------------------------------------------
grid-item: todos los elementos que estan dentro de
grid container(hijos directos)
gird-cell: celdas  del grid container
grid-tracks: columnas y filas
grid-template-rows: 150px 150px 150px;----:crea una cantidad de 
filas a definir
grid-template-columns: 150px 150px 150px;-----:crea una cantidad de
columnas a definir
fr: reparte la  cantidad de espacio que sobra a las filas o columnas
grid-gap: margin entre las casillas pero no en los bordes (se puede usar tambien grid-column-gap para columnas y grip-rows-gap para filas)
grid-row(grid-column): 1/3;----: ocupa el espacio desde la linea 1 hasta la 3
grid-column: 1/ span 3; ocupa desde la linea 1 y ocupa hasta  la  columna 3
repeat(3,150px) 1fr: funcion que repite medidas
ejemplo: 
body{
    padding: 15px;
    background: radial-gradient(circle,#fff,#bbb);
}

.grid_cont{
    display: grid;
    grid-template-rows: 150px 150px 150px;
    grid-template-columns: repeat(3,150px) 1fr;
    border: 4px solid #000;
    background-color: #aaa;
}
.grid_item{
    border: 2px solid #000 ;
    background-color: #777;
    
}
.grid_item:first-child{
    background: #708;
    grid-column: 1/ span 2;
    grid-row: 1/3;
}------------------------------------------------
grid implicito y explicito
grid-auto-flow: column;: cambia de eje(columna / fila) los cuadros sobrantes con (grid-auto-rows): ;
grid-auto-flow: dense; rellena los  campos vacios con el cuadro mas cercano
---------------------------------------------------
grid dinamico: (generalmente se usan con repeat)
minmax(100px,300px):dar una medida minima a un cuadro y una medida maxima
min-content: cantidad minima para mostrar el contenido del  cuadro
auto-fill: incrementa la cantidad de columnas o filas repartiendo los cuadros mientras agrandamos la pantalla
auto-fit: escala los elementos
ejemplo:
*{
    font-size: 20px;
}

body{
    padding: 15px;
    background: radial-gradient(circle,#fff,#bbb);
}

.grid_cont{
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px , 1fr));
    grid-template-rows: repeat(3,150px);
    background-color: #555;
    border: solid #000;
}

.grid_item{
    border: 2px solid #000 ;
    background-color: #777;
}-----------------------------------------------------------
alineaciones align : (eje y) 
justify-items: center;-----:  centra los cuadros separados (items)
 justify-items: start;------: coloca los cuadros al principio a la izquierda
justify-items: end;------: coloca los cuadros al final a la derecha 
align-items: start; ------:  coloca los cuadros al principio arriba(tambien está center y end)
ejemplo:
.grid_cont{
    display: grid ;
    grid-template-columns: repeat(3,minmax(120px,1fr));
    grid-template-rows: repeat(3,200px);
    border: solid #000;
    background-color: #555;
    justify-items: center;
    align-items: center;
}-----------------------
justify-content: start; coloca las columnas al principio al  final o en el centro
align-content: center: traslada todos los cuadros juntos hasta al centro el principio o final
EJEMPLO:
.grid_cont{
    display: grid ;
    grid-template-columns: repeat(3,minmax(120px,150px));
    grid-template-rows: repeat(3,150px);
    border: solid #000;
    background-color: #555;
    justify-content: start;
    align-content: center;
    height: 600px;
    align-items: center;
    justify-items: center;
}-----------------
justify-content: space-around; 
align-content: center;----: lo mismo que en elementos flex
align-self: traslada un cuadro al  principio al final o al centro (solo sirve para items)
ejemplo: colocando los cuadros separados juntos
.grid_item:first-child{
    align-self: start;
    justify-self: start;
}
.grid_item:nth-child(6){
    justify-self: start;
}

.grid_item:nth-child(5){      .grid_item:last-child: elige el ultimo elemento
    justify-self: end;
}--------------------------
place_self:----: sirve para abreviar justify-self y align-self
order: funciona como en los elementos flex (siqueremos que aparezca de ultimo hay que darle un valpr
mas alto y si queremos que aparezca de primero le colocamos un valor mas bajo)
ejemplo:
.grid_item{
    border: 2px solid #000 ;
    background-color: #777;
    font-size: 30px;
    padding: 50px;
    
}

.grid_item:first-child{
    background-color: red;
    order: 3;
}-----------------------
areas:
grid-template-areas: especifica nombres para cada una de las grid areas.
ejemplo:
.grid_cont{
    margin: 30px;
    background-color: #555;
    display: grid;
    grid-template-areas: 
    "header header header"
    "aside main main"
    "aside main main"
    "footer footer footer";

}------------------
grid-area: son las areas del grid-template-area
ejemplo: 
.main{
    background: #090;
    grid-area: main;
}-------------------
nombrar grid lines:
para nombrar las lineas de las columnas y filas se usan corchetes entre las medidas de los item
(tambien sirve para las areas)
ejemplo: 
.grid_cont{
    margin: 20px;
    background-color: #555;
    display: grid;
    grid-template-rows: 
            [f-line]
            1fr 
            [s-line]
            1fr
            [t-line]
            1fr
            [ult-line];
    grid-template-columns: 1fr 1fr 1fr ;
    height: 90vh;
    border: solid #fff;
}  

.grid_item:first-child{
    grid-row: f-line/t-line;
    background-color: red;
}-------------------------------------------------------------
responsive design: mobile-firts : se trabaja para telefono y despues a monitor(mas recomendado)
@media screen: sintaxis de responsive-design 
ejemplo: 
SI la resolucion pasa de  600px Y(AND) es  menor a 800px el background va a ser rojo
@media screen and (min-width:600px) and (max-width:800px){
    .sect-respons{
        background: #e00;
    }
}---------------------------------------------
transiction-property:----:transicion de una propiedad 
transiction-delay:------:tiempo de delay para que ocurra la transicion
transiction-duration: 1s;-----: define el tiempo que va a durar la transition
background: inherit;-----:se usa para heredar el color de fondo
.cont:hover >.caja-----: con este codigo si colocamos el mouse en el contenedor todas las cajas transitan
tipos de transitions:
.caja:first-child{
    transition-timing-function:ease ;
}
.caja:nth-child(2){
    transition-timing-function:ease-in ;
}
.caja:nth-child(3){
    transition-timing-function:ease-out ;
}
.caja:nth-child(4){
    transition-timing-function:ease-in-out ;
}
.caja:nth-child(5){
    transition-timing-function:linear
}--------------------------------------------------
animaciones:
    animation-name: desplazarse; --> le colocamos el nombre que creamos(funciona como variable o como funcion)
    animation-duration: 4s;
    position: relative;
}
sintaxis:
@keyframes desplazarse{ le colocamos el nombre a la animacion y hacemos que funcione
    from {     -->    from: desde (comienzo)
        
        left: 0; -->  direccion
    }
    to{        -->     to : hasta (fin)
        left:100%
    }
}
-----------
@keyframes desplazarse{
    0%{ -----> con porcentajes  puedes  cambiar la animacion hasta que termine
        left: 0;
    }
    50%{
        background: green;   
    }
    100%{
        background: red;
        left:80% 
    }
}
animation-timing-function:---> como se va a desplazar la caja (funciona igual que transition-timing-function las mismas propiedades
animation-iteration-count: 3;---> elegimos cuantas veces se repite la animacion (con INFINITE se repite ilimitadamente)
animation-direction: alternate;---> cambiamos de direccion ( alternate: va de lado a lado)
(alternat-reverse: va de lado a lado empezando por el final) (reverse: va desde el final hasta el inicio)
animation-fill-mode: forwards;---> la  animacion queda en el  100% queda como finaliza(queda como el ultimo codigo establecido)
animation-fill-mode: both;--->  arranca con la propiedad que le decimos al principio de la animacio(arranca en 0%)
ejemplo:
.caja{
    background-color: #337;
    width: 100px;
    height: 100px;  
    margin: 30px;
    animation-name: desplazarse;
    animation-duration: 1s;
    position: relative;
    animation-iteration-count: 1;
    animation-fill-mode: forwards;
    animation-fill-mode: both;
}

@keyframes desplazarse{
    0%{
        left: 0;
    }
    50%{
        background: green;   
    }
    100%{
        background: red;
        left:80% 
    }
}-----------------------
animation-timing-function: cubic-bezier(0.075, 0.82, 0.165, 1);---> coordenas de curvas para editar el movimiento de la animacion
-----------------------------------------
transform: se usa con funciones() mas propiedades de transform:  https://www.w3schools.com/cssref/css3...
transform: translateX(50px);--> traslada el elemento en el eje x (reemplazando la x con y se mueve en el eje y)
transform: translate(50%, 50%);---> trabaja con el eje x y y (con porcentajes se traslada lo  que mide el elemento)
transform: scale(2);---> agranda  el elemento (se puede  trabajar con eje x y y) el tamaño del elemento se multiplica por el valor definido
transform:skew(30deg);---> distorciona el elemento por grados 
clip-path: ;----> podemos elegir la forma del bloque con generadores en internet

ejemplo: 
.caja{
    background-color: #025;
    width: 80px;
    height: 80px;  
    margin: 30px;
    display: flex;
    color: #fff;
    transform: translate(50px, 50px);
    transform: scale(2);
    transition-duration: 3s;
    clip-path: polygon(coordenadas);
}
nota perso : existen generadores de todo tipo
nota perso: usar translate en  vez de left margin etc...
.caja:hover {
    transform:skew(30deg)
}

b{
    margin: auto;
}
b:hover{
    transform: skew(-30deg);--->para que las letras no se distorcionen
                                con el bloque
   
}--------------------------------------------------
background: si se necesita se investiga las propieddes

.cont{
    background-color: #86f;
    padding: 30px;
    height: 300px;
    width: 300px;
    margin: 30px;
    background-image:url();---> imagenes de fondo                                        
    background-position: cover; cover
    background-attachment: fixed; fija el fondo (el efecto se ve cuando se scrollea)
    background-repeat: no-repeat; no repite el fondo
    background-size: 300px 300px; tamaño del fondo  
}-------------------------------------------------------------
variables:las variables se  pueden redefinir
:root{---> crea variables globales
    --color-rojo: #f00
}
.cont{
    background-color: var(--color-rojo);---> para aplicar  las variables se usa var
}
.cont2{--> creando variables solo  para este codigo(etiqueta)
    background: var(--color-rojo);redefinimos  la variable
    --color-rojo: #000 
    
}--------------------------------------------------------------
filter: podemos colocar varios valores en  un filter
filter: blur(10px);---> desenfoca la imagen 
filter:brightness(.5)---> edita el brillo
filter:contrast(1.5)---> edita  el contraste
filter:drop-shadow(0px 0px 10px #000) drop-shadow(0px 0px 10px #000) drop-shadow(0px 0px 10px #000) ----> da profundidad a las imagenes transparentes(funciona como box-shadow)
 filter: grayscale(.5);---> engrisa la imagen
filter: hue-rotate(30deg);----> se invierte la gamma de los colores
filter: invert(70%);----> invierte los colores
filter: opacity(.2);---> opacidad
filter: saturate(400%); satura los colores
filter: sepia(.5);---> se coloca sepia la imagen
url:  buscar en internet
------------------------------------------------------------------------
direction: rtl;---> coloca los elementos de derecha a izquierda
letter-spacing: 7px;---> separacion de letras
scroll-behavior: smooth; ---> baja la velocidad de el link  que te  lleva hacia arriba o abajo de la pantalla
user-select: none;---> no deja  seleccionar(subrayar etc) el contenido  por el usuario
-------------------------------------------------
selectores: https://www.w3schools.com/cssref/css_...










































